feature .pykx.eval
    should return the correct types
        expect to return a wrapped object
            .qu.compare[105h; type .pykx.eval["1 + 1"]]

        expect the unwrapped foreign to be the correct ktype long
            .qu.compare[-7h; type .pykx.eval["1 + 1"]`]

        expect the unwrapped foreign to be the correct ktype int 
            .qu.compare[-6h; type .pykx.eval["pykx.IntAtom(1 + 1)"]`]

        expect the unwrapped foreign to be the correct ktype short
            .qu.compare[-5h; type .pykx.eval["pykx.ShortAtom(1 + 1)"]`]

        expect the unwrapped foreign to be the correct ktype symbol
            .qu.compare[-11h; type .pykx.eval["'hello world'"]`]

        expect the unwrapped foreign to be the correct ktype char vector
            .qu.compare[10h; type .pykx.eval["b'hello world'"]`]

        expect the wrapped object to contain a foreign
            .qu.compare[112h; type .pykx.eval["1 + 1"]`.]

    should allow Path objects to be used as inputs to functions
        expect a function taking a single argument to allow Path objects as function parameter
            ret:.pykx.eval["lambda x:x"]`:test;
            `:test ~ ret`

        expect a function taking multiple arguments to allow a Path object as first function parameter
            ret:.pykx.eval["lambda x, y:[x, y]"][`:test;1];
            (`:test;1) ~ ret`

        expect an error to be raised if a Path object is supplied as a parameter when not suitable
            system"c 2000 2000";
            @[.pykx.eval"lambda x:x+1";`:test;{x like "*TypeError(\"unsupported operand type(s) for +: 'PosixPath' and 'int'\")"}]

    should error appropriately if supplied an incorrect type
        expect to error if input type is non string
            err:@[.pykx.eval;5?0Ng;{x}];
            err like "String input expected for code evaluation/execution."

        expect to evaluate correctly if supplied a char atom
            .qu.compare[-7h; type .pykx.eval["1"]`]
    should not convert wraps passed to functions
        expect not convert wraps passed to functions
            np:.pykx.import `numpy;
            r:np[`:random.rand;1;2];
            r~.pykx.eval["lambda x: x"] r;
feature .pykx.qeval
    should return the correct values and types
        expect to return a 2
            .qu.compare[2; .pykx.qeval["1+1"]]
        expect to return a composition
            .qu.compare[105h; type .pykx.qeval["lambda x, y: x + y"]]
        expect to return 2
            .qu.compare[2; .pykx.qeval["lambda x, y: x + y"][1;1]]
        expect to return 2
            .qu.compare[2; .pykx.qeval["lambda x, y: x + y"] . (1;1)]
        expect ` 
            .qu.compare[`;.pykx.eval["lambda x: x"][<]`]
        expect `.
            .qu.compare[`.;.pykx.eval["lambda x: x"][<]`.]
        expect ` 
            .qu.compare[`;.pykx.toq .pykx.eval["lambda x: x"][>]`]
        expect `.
            .qu.compare[`.;.pykx.toq .pykx.eval["lambda x: x"][>]`.]

feature No segfault on compressed
    before
        (`:compressed16383;17;1;0) set til 16383
    should No segfault
        expect No segfault
            .qu.compare[desc til 16383 ;desc get `:compressed16383]
    after
        hdel `:compressed16383

feature Typed wraps are wraps and can be unwrapped
    should be wraps
        expect 1b
            .pykx.util.isw  .pykx.eval["lambda x: x"]
        expect 1b
            .pykx.util.isw  .pykx.eval["lambda x: x";<]
        expect 1b
            .pykx.util.isw  .pykx.eval["lambda x: x";>]

    should be possible to unwrap
        expect 1b
            .pykx.util.isf .pykx.unwrap .pykx.eval["lambda x: x"]
        expect 1b
            .pykx.util.isf .pykx.unwrap .pykx.eval["lambda x: x";<]
        expect 1b
            .pykx.util.isf .pykx.unwrap .pykx.eval["lambda x: x";>]

feature toq0 conversions to support char returns
    before
        str::.pykx.eval["\"qstring\""];
        list::.pykx.eval["[\"qstring0\", \"qstring1\"]"];
        dict::.pykx.eval["{\"a\":{\"b\":\"qstring0\"}, \"b\":\"qstring1\"}"];
 
    should show returns by default with toq0 are symbols
        expect 1b
            .qu.compare[`qstring;.pykx.toq0 str]
        expect 1b
            .qu.compare[`qstring0;first .pykx.toq0[list]]
        expect 1b
            .qu.compare[`qstring0;.pykx.toq0[dict] . `a`b]

    should show returns by default with toq0 are strings
        expect 1b
            .qu.compare["qstring";.pykx.toq0[str;1b]]
        expect 1b
            .qu.compare["qstring0";first .pykx.toq0[list;1b]]
        expect 1b
            .qu.compare["qstring0";.pykx.toq0[dict;1b] . `a`b]

    should error if incorrect values provided to toq0
        expect error if passed incorrect second argument
            .[.pykx.toq0;(`test;`no);{x like "Supplied 2nd argument*"}]
        expect error if too many arguments passed
            .[.pykx.toq0;(`test;1b;1b);{x like "toq takes a maximum*"}]

feature Qlog functions to not be defined in pykx namespace
    should not have functions polluting the .pykx namespace
        expect namespace to not have function names provided by qlog in .i namespace
            @[{get x;0b};`.pykx.i.endpoint;1b]
        expect namespace to not have functions in root provided by qlog
            @[{get x;0b};`.pykx.setCorrelator;1b]
        
    should have logging namespace populated when running on linux
        expect logging to be defined if running on linux in root namespace
            $[.z.o~`l64;@[{get x;1b};`.com_kx_log.setCorrelator;0b];1b]
        expect logging functionality to have loaded in the .i namespace
            $[.z.o~`l64;@[{get x;1b};`.com_kx_log.i.endpoint;0b];1b]

feature toq conversions to support compositions
    should pass through compositions
        expect q composition
            .qu.compare[any;.pykx.toq any]
        expect q composition
            .qu.compare[any;.pykx.toq0 any]
        expect q composition
            .qu.compare[any;.pykx.toq0[any;0b]]
        expect q composition
            .qu.compare[any;.pykx.toq0[any;1b]]