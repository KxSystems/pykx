feature conversions
    before
        t::.pykx.eval["lambda x: bytes(str(type(x)), 'utf-8')"][<];
    should convert unwrapped foreigns to correct types
        expect python type
            .qu.compare["<class 'list'>"; t .pykx.topy til 10];
        expect numpy type
            .qu.compare["<class 'numpy.ndarray'>"; t .pykx.tonp til 10];
        expect pandas type
            .qu.compare["<class 'pandas.core.series.Series'>"; t .pykx.topd til 10];
        expect pyarrow type
            .qu.compare["<class 'pyarrow.lib.Int64Array'>"; t .pykx.topa til 10];
        expect K type
            .qu.compare["<class 'pykx.wrappers.LongVector'>"; t .pykx.tok til 10];
        expect raw conversions to work
            .qu.compare["<class 'int'>"; t .pykx.toraw .z.t];
        expect raw datetime conversions to work
            .qu.compare["<class 'float'>"; t .pykx.toraw 2006.07.21T09:13:39];
    should convert wrapped foreigns to correct types
        expect python type
            x:.pykx.eval"pykx.LongVector(list(range(10)))";
            .qu.compare["<class 'list'>"; t .pykx.topy x];
        expect numpy type
            x:.pykx.eval"pykx.LongVector(list(range(10)))";
            .qu.compare["<class 'numpy.ndarray'>"; t .pykx.tonp x];
        expect pandas type
            x:.pykx.eval"pykx.LongVector(list(range(10)))";
            .qu.compare["<class 'pandas.core.series.Series'>"; t .pykx.topd x];
        expect pyarrow type
            x:.pykx.eval"pykx.LongVector(list(range(10)))";
            .qu.compare["<class 'pyarrow.lib.Int64Array'>"; t .pykx.topa x];
        expect K type
            x:.pykx.eval"pykx.LongVector(list(range(10)))";
            .qu.compare["<class 'pykx.wrappers.LongVector'>"; t .pykx.tok x];
        expect raw list type
            x:.pykx.eval"pykx.LongVector(list(range(10)))";
            .qu.compare["<class 'list'>"; t .pykx.toraw x];

feature default conversions
    before each
        t::.pykx.eval["lambda x: bytes(str(type(x)), 'utf-8')"][<];
    after each
        .pykx.setdefault["default"];
    should support default default
        expect default for LongVector
            .qu.compare["<class 'numpy.ndarray'>"; t til 10];
        expect default for dict
            .qu.compare["<class 'dict'>"; t `a`b!1 2];
        expect default for table
            .qu.compare["<class 'pandas.core.frame.DataFrame'>"; t ([]a:2 3; b:4 5)];
        expect default for keyed table
            .qu.compare["<class 'pandas.core.frame.DataFrame'>"; t ([a:2 3] b:4 5)];
    should support python default
        expect python default
            .pykx.setdefault["python"];
            .qu.compare["<class 'list'>"; t til 10];
    should support numpy default
        expect numpy default
            .pykx.setdefault["numpy"];
            .qu.compare["<class 'numpy.ndarray'>"; t til 10];
        expect differences in list support for default and numpy
            all(t[.pykx.tonp (10?1f;10?1f)]like"<class 'numpy.ndarray'>";
                t[.pykx.todefault (10?1f;10?1f)]like"<class 'list'>")
    should support pandas default
        expect pandas default
            .pykx.setdefault["pandas"];
            .qu.compare["<class 'pandas.core.series.Series'>"; t til 10];
    should support pyarrow default
        expect pyarrow default
            .pykx.setdefault["PyArrow"];
            .qu.compare["<class 'pyarrow.lib.Int64Array'>"; t til 10];
    should support K default
        expect K default
            .pykx.setdefault["k"];
            .qu.compare["<class 'pykx.wrappers.LongVector'>"; t til 10];
    should error under condition default conversion type is not supported
        expect failure if default conversion unsupported
            err:@[.pykx.setdefault;"unsupported";{x}];
            err like "unknown conversion type: unsupported"
feature time conversions
    should return as pykx timespan objects
        expect timespan object returned when time passed
            .pykx.pyexec"from datetime import time";
            .qu.compare[.pykx.eval["time(11, 34, 56)"]`;0D11:34:56.000000000];
        expect timespan object returned when timedelta passed
            .pykx.pyexec"import numpy as np";
            .qu.compare[.pykx.eval["np.timedelta64(1, 'D') + np.timedelta64(9, 'h')"]`;1D09:00:00.000000000]
feature guid conversions
    should roundtrip guids correctly
        expect same guid atom returned 
            .pykx.pyexec"from uuid import UUID";
            .qu.compare[.pykx.eval["UUID('db712ca2-81b1-0080-95dd-7bdb502da77d')"]`;"G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"];
        expect same guid list returned 
            .qu.compare[.pykx.eval["[UUID('db712ca2-81b1-0080-95dd-7bdb502da77d')]"]`;enlist"G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"];
        expect same guid list returned from numpy
            .pykx.pyexec"import numpy as np";
            .qu.compare[.pykx.eval["np.array([UUID('db712ca2-81b1-0080-95dd-7bdb502da77d')], dtype=object)"]`;enlist "G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"]
        expect same guid atom returned 
            .qu.compare[.pykx.eval["UUID('7ff0bbb9-ee32-42fe-9631-8c5a09a155a2')"]`;"G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"];
        expect same guid list returned 
            .qu.compare[.pykx.eval["[UUID('7ff0bbb9-ee32-42fe-9631-8c5a09a155a2')]"]`;enlist"G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"];
        expect same guid list returned from numpy
            .qu.compare[.pykx.eval["np.array([UUID('7ff0bbb9-ee32-42fe-9631-8c5a09a155a2')], dtype=object)"]`;enlist"G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"]
        expect guid atom to python
            .qu.compare[.pykx.eval["lambda x: str.encode(str(x))"]["G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"]`;"db712ca2-81b1-0080-95dd-7bdb502da77d"];
        expect guid list to python
            .qu.compare[.pykx.eval["lambda x: str.encode(str(x))"][enlist "G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"]`;"[UUID('db712ca2-81b1-0080-95dd-7bdb502da77d')]"];
        expect guid atom to python
            .qu.compare[.pykx.eval["lambda x: str.encode(str(x))"]["G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"]`;"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"];
        expect guid list to python
            .qu.compare[.pykx.eval["lambda x: str.encode(str(x))"][enlist "G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"]`;"[UUID('7ff0bbb9-ee32-42fe-9631-8c5a09a155a2')]"];            
        expect guid atom round trip
            .qu.compare[.pykx.eval["lambda x: x"]["G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"]`;"G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"];
        expect guid list round trip
            .qu.compare[.pykx.eval["lambda x: x"][enlist "G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"]`;enlist "G"$"db712ca2-81b1-0080-95dd-7bdb502da77d"];
        expect guid atom round trip
            .qu.compare[.pykx.eval["lambda x: x"]["G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"]`;"G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"];
        expect guid list round trip
            .qu.compare[.pykx.eval["lambda x: x"][enlist "G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"]`;enlist "G"$"7ff0bbb9-ee32-42fe-9631-8c5a09a155a2"];

