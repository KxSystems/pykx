feature .pykx.repr
    before
        .pykx.pyexec"aclass = type('TestClass', (object,), {'x': pykx.LongAtom(3), 'y': pykx.toq('hello')})";
        a:: .pykx.eval"aclass";

    should return char vector type
        expect char vector
            .qu.compare["<class '__main__.TestClass'>"; .pykx.repr a`.];
        expect char vector of length one
            .qu.compare[enlist "2"; .pykx.repr .pykx.eval["1 + 1"]`.];
    should still work for non foreign objects
        expect q objects to be handled
            .qu.compare["`ab\n"; .pykx.repr `ab];

feature .pykx.modpow
    should provide modpow functionality
        expect mod to work
            .qu.compare[5; .pykx.modpow[10; 2; 19]];
        expect pow to work without mod
            .qu.compare[100; .pykx.modpow[10; 2; ::]];

feature .pykx.unwrap
    should unwrap wrapped foreigns
        expect a foreign to be contained
            .qu.compare[112h; type .pykx.unwrap .pykx.eval"1"];
        
    should pass on unwrapped foreigns
        expect a foreign to be contained
            .qu.compare[112h; type .pykx.unwrap[.pykx.eval["1"]`.]];

feature .pykx.toq
    should return native q types from unwrapped foreign
        expect a long atom
            .qu.compare[-7h; type .pykx.toq .pykx.eval["1"]`.];
        expect a short atom
            .qu.compare[-5h; type .pykx.toq .pykx.eval["pykx.ShortAtom(1)"]`.];
    should return native q types from wrapped foreign
        expect a long atom
            .qu.compare[-7h; type .pykx.toq .pykx.eval["1"]];
        expect a short atom
            .qu.compare[-5h; type .pykx.toq .pykx.eval["pykx.ShortAtom(1)"]];
    should round trip if the item is not a foreign/wrapper
        expect round trips to be handled gracefully for existing q data
            all(
                val~.pykx.toq val:til 10;
                val~.pykx.toq val:100?0Ng;
                val~.pykx.toq val:([]10?1f;10?1f);
                val~.pykx.toq val:`a`b`c!1 2 3
               )

feature .pykx.py2q
    should return native q types from unwrapped foreign
        expect a long atom
            .qu.compare[-7h; type .pykx.py2q .pykx.eval["1"]`.];
        expect a short atom
            .qu.compare[-5h; type .pykx.py2q .pykx.eval["pykx.ShortAtom(1)"]`.];
    should return native q types from wrapped foreign
        expect a long atom
            .qu.compare[-7h; type .pykx.py2q .pykx.eval["1"]];
        expect a short atom
            .qu.compare[-5h; type .pykx.py2q .pykx.eval["pykx.ShortAtom(1)"]];
    should round trip if the item is not a foreign/wrapper
        expect round trips to be handled gracefully for existing q data
            all(
                val~.pykx.py2q val:til 10;
                val~.pykx.py2q val:100?0Ng;
                val~.pykx.py2q val:([]10?1f;10?1f);
                val~.pykx.py2q val:`a`b`c!1 2 3
               )

feature .pykx.version
    should return an appropriate type when executed
        expect a string
            .qu.compare[10h;type .pykx.version[]];

feature .pykx.debug
    should return system information when executed
        expect a general list with PyKX information as the first element
            ret:.pykx.debugInfo[];
            all(0h~type ret;ret[0]like"*PyKX information*")

feature .pykx.print
    should call print appropriately on python type objects
        expect null to be returned in each case
            all(
                (::)~.pykx.print .pykx.import[`numpy];
                (::)~.pykx.print til 10;
                (::)~.pykx.print .pykx.import[`numpy;`:array][til 10]
               )

feature .pykx.loadPy
    should error under various conditions
        expect to error if the file is not a string
            @[{.pykx.loadPy x;0b};`file;{x like"Parameter 'file'*"}]
        expect to error if the file does not have the correct extension
            @[{.pykx.loadPy x;0b};"file.t";{x like"File extension must be .py/.p"}]
        expect to error if loading .p file directly without loadPy
            @[{system"l ",x;0b};"tests/test_files/func1.p";{x like"SyntaxError*"}]

    should allow loading of various files
        expect loading of .py files to work using .pykx.loadPy
            .pykx.loadPy"tests/test_files/func0.py";
            all(
                99h~type .pykx.get[`dict0]`;
                11~.pykx.get[`func0;<][10]
                )
        expect loading of .p files to work using .pykx.loadPy
            .pykx.loadPy"tests/test_files/func1.p";
            all(
                99h~type .pykx.get[`dict1]`;
                11~.pykx.get[`func1;<][10]
                )
